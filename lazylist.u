use .builtin.Nat

-- TODO use these definitions

type Fix f = Fix (f (Fix f))

type F a r = Nil | Cons a (() -> r)

type List a = List (Fix (F a))

(:|) : a -> F a -> List a
n :| l =
  List.List '(Fix (F.Cons n 'l))

---

type LazyList a = Nil | Cons a (() -> LazyList a)

(:>) : a -> 'LazyList a -> LazyList a
n :> l=
    Cons n l

lazyhead : LazyList a -> Optional a
lazyhead xs =
  case xs of
    LazyList.Cons f ts -> Some f
    LazyList.Nil -> None

lazytail : LazyList a -> LazyList a
lazytail xs =
  case xs of
    LazyList.Cons f ts -> !ts
    LazyList.Nil -> LazyList.Nil

lazytake : Int -> LazyList Nat -> List Nat
lazytake n xs =
  goLazytake n xs []

goLazytake : Int -> LazyList Nat -> List Nat -> List Nat
goLazytake n xs rs = 
  if n == (toInt 0)
    then rs
    else let
            hd = lazyhead xs
            rs_ = case hd of
                    Some n -> cons n rs
                    None -> rs
            xs_ = lazytail xs
            goLazytake (n - (toInt 1)) xs_ rs_

