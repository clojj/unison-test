use .builtin
use .builtin.Nat
use .builtin.Int
use .builtin.List
use .builtin.Optional

-- TODO How to utilise this type for lazy lists ? 
-- type Fix f = Fix (f (Fix f))

-- TODO how to implement Haskell's fix in Unison ?
-- fix : (a -> a) -> (() -> a)
-- fix f = 
--   let x = '(f x)
--   x

type LazyList a = LazyNil | LazyCons a (() -> LazyList a)

lazycons : a -> (() -> LazyList a) -> LazyList a
lazycons n l = 
  LazyCons n l

lazyhead : LazyList a -> Optional a
lazyhead xs =
  case xs of
    LazyList.LazyCons f ts -> Some f
    LazyList.LazyNil -> None

lazytail : LazyList a -> LazyList a
lazytail xs =
  case xs of
    LazyList.LazyCons f ts -> !ts
    LazyList.LazyNil -> LazyList.LazyNil

lazytake : Int -> LazyList Nat -> List Nat
lazytake n xs =
  goLazytake n xs []

goLazytake : Int -> LazyList Nat -> List Nat -> List Nat
goLazytake n xs rs = 
  if n == (toInt 0)
    then rs
    else let
            hd = lazyhead xs
            rs_ = case hd of
                    Some n -> cons n rs
                    None -> rs
            xs_ = lazytail xs
            goLazytake (n - (toInt 1)) xs_ rs_

